@using Microsoft.AspNetCore.Authorization
@model TourWebsite.Models.Tours.TourEdit
@inject IAuthorizationService auth

@{
    ViewData["Title"] = "Move Tour";


    AuthorizationResult authorized1 = await auth.AuthorizeAsync(User, null, "TourAccess");

}

@if (authorized1.Succeeded)
{


    @* Maybe not standard, but I am using the presence of this label as a boolean*@

    <h3 id="canAddTour">Click to move tour</h3>
    <br>


     <form asp-action="PassToEdit">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

        <table class="table table-sm" cellpadding="0" cellspacing="0" border="0">
        <table class="table table-sm" cellpadding="0" cellspacing="0" border="0">

                <input asp-for="TourID" hidden  class="form-control" value="@Model.TourID" />

           <thead>
            <tr>
            <td>
            <div class="form-group">
                <label asp-for="Longitude" class="control-label">Longitude</label>
                <input asp-for="Longitude" id="long" class="form-control" value="" />
                <span asp-validation-for="Longitude" class="text-danger"></span>
            </div>
            </td>
            <td>
                    <div class="form-group">
                        <label asp-for="Lattitude" class="control-label">Latitude</label>
                        <input asp-for="Lattitude" id="lat" class="form-control" value="" />
                        <span asp-validation-for="Lattitude" class="text-danger"></span>
                    </div>
                </td>

            <td>
                <div class="form-group">
                    <input type="submit" value="Save" class="btn btn-primary" />
                </div>

            </td>
            </tr>

            </thead>
        </table>
    </form>
}

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

}
@section Map {
    <div id="viewDiv"></div>
}
