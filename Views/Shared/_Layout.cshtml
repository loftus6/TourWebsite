@using Microsoft.AspNetCore.Authorization
@using TourWebsite.Data
<!DOCTYPE html>
<html lang="en">

@inject IAuthorizationService auth
@inject TourWebsiteContext tourSiteContext

@{
    AuthorizationResult authorized = await auth.AuthorizeAsync(User, "AdminAccess");
}
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - TourWebsite</title>
    <script type="importmap"></script>


    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/TourWebsite.styles.css" asp-append-version="true" />


    @* TinyMCE text editor *@
    <script type="text/javascript" src="~/js/tinymce/tinymce.min.js"> </script>



</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container-fluid">
                <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">TourWebsite</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Index">Home</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="TourSites" asp-action="Index">Tour Sites</a>
                        </li>
                        @if (authorized.Succeeded)
                        {
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-area="" asp-controller="Role" asp-action="Index">Administration</a>
                            </li>
                        }
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
                        </li>
                    </ul>
                </div>
                <partial name="_LoginPartial" />
            </div>
        </nav>
    </header>
    <div class="container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>

    @await RenderSectionAsync("Map", required: false)

    <!-- Load Calcite -->

    <script defer type="module" src="https://js.arcgis.com/calcite-components/3.0.3/calcite.esm.js"></script>

    <!-- Load the ArcGIS Maps SDK for JavaScript core API -->
    <link defer rel="stylesheet" href="https://js.arcgis.com/4.32/esri/themes/dark/main.css" />
    <script src="https://js.arcgis.com/4.32/"></script>

    <!-- Load map components -->
    <script defer type="module" src="https://js.arcgis.com/map-components/4.32/arcgis-map-components.esm.js"></script>


    @{

        AuthorizationResult authorized1 = await auth.AuthorizeAsync(User, null, "TourAccess"); //If has full access




        var toursites = tourSiteContext.TourSites; 

        var longLat = new List<double[]>();

        var visible = new List<bool>();

        var editable = new List<bool>();

        foreach (var site in toursites)
        {
            longLat.Add([site.Longitude, site.Lattitude]);

            var allowedUsers1 = site.ApprovedUsers;
            AuthorizationResult authorized2 = await auth.AuthorizeAsync(User, allowedUsers1, "TourAccess"); //Who can view this

            var allowedUsers2 = site.ApprovedEditUsers;
            AuthorizationResult authorized3 = await auth.AuthorizeAsync(User, allowedUsers2, "TourAccess"); //Who can edit this

            if (authorized2.Succeeded || authorized3.Succeeded || (site.Visibility == VisibilityType.Public)) //Always show public
                visible.Add(true);
            else
                visible.Add(false);

        }
    }

    @* Map stuff *@
    <script defer>
        require([
            //"esri/tasks/Locator",
            "esri/Map",
            "esri/views/MapView",
            "esri/Graphic"
        ], function (Map, MapView, Graphic) {

            //// Set up a locator task using the world geocoding service
            //var locatorTask = new Locator({
            //    url:
            //        "https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer"
            //});

            var map = new Map({
                basemap: "topo-vector"
            });

            var view = new MapView({
                container: "viewDiv",
                map: map,
                center: [-82.4452, 38.4191,], // longitude, latitude
                zoom: 18
            });

            //view.ui.add("instruction", "bottom-left");

            var simpleMarkerSymbol = {
                type: "simple-marker",
                color: [226, 119, 40],  // orange
                outline: {
                    color: [255, 255, 255], // white
                    width: 1
                }
            };





            var existingPoints = JSON.parse("@Json.Serialize(longLat)");
            var pointVisibility = JSON.parse("@Json.Serialize(visible)");

 


            for (let i = 0; i < existingPoints.length; i++){


                ePoint = existingPoints[i];

                if (!pointVisibility[i])
                    continue;

                var pointOnTheMap1 = new Graphic({
                    symbol: simpleMarkerSymbol
                });

                var longitude = ePoint[0];
                var latitude = ePoint[1];



                var point = {
                    type: "point",
                    longitude: longitude, // Please make sure to use the unrounded values
                    latitude: latitude    // otherwise your point will appear in the wrong spot
                };

                pointOnTheMap1.geometry = point;

                view.graphics.add(pointOnTheMap1);
            }

            //create a Graphic without geometry - this will be set later
            var pointOnTheMap = new Graphic({
                symbol: simpleMarkerSymbol
            });

            // add the 'invisible' Graphic to the MapView
            view.graphics.add(pointOnTheMap);
            /*******************************************************************
             * This click event sets generic content on the popup not tied to
             * a layer, graphic, or popupTemplate. The location of the point is
             * used as input to a reverse geocode method and the resulting
             * address is printed to the popup content.
             *******************************************************************/
            view.popup.autoOpenEnabled = false;
            view.on("click", function (event) {


                var longOb = document.getElementById("long");
                var latOb = document.getElementById("lat")
                var addBox = document.getElementById("addTour")

                if (typeof (longOb) != 'undefined' && longOb != null && addBox.checked) {
                    // Get the coordinates of the click on the view
                    var longitude = event.mapPoint.longitude;
                    var latitude = event.mapPoint.latitude;
                    // Round the coordinates for visualization purposes
                    var lon = Math.round(longitude * 100000) / 100000;
                    var lat = Math.round(latitude * 100000) / 100000;

                    console.log(longitude)
                    console.log(latitude)

                    var point = {
                        type: "point",
                        longitude: longitude, // Please make sure to use the unrounded values
                        latitude: latitude    // otherwise your point will appear in the wrong spot
                    };

                    pointOnTheMap.geometry = point;


                    longOb.value = lon
                    latOb.value = lat
                }
            });
        });

    </script>


    <link defer href="~/css/map.css" rel="stylesheet" />


    @await RenderSectionAsync("Scripts", required: false)


    @* <footer class="border-top footer text-muted"> *@
    @*     <div class="container"> *@
    @*         &copy; 2025 - TourWebsite - <a asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a> *@
    @*     </div> *@
    @* </footer> *@

</body>
</html>
